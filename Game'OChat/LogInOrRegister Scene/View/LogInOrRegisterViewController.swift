//
//  LogInOrRegisterViewController.swift
//  Game'OChat
//
//  Created by Roushil singla on 2/11/20.
//  Copyright (c) 2020 personal. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LogInOrRegisterViewControllerInput: class {
    func display(viewModel: LogInOrRegister.Fetch.ViewModel)
   
}

protocol LogInOrRegisterViewControllerOutput {
    func fetch(request: LogInOrRegister.Fetch.Request)

}

class LogInOrRegisterViewController: UIViewController {
    
    var output: LogInOrRegisterViewControllerOutput!
    var router: (NSObjectProtocol & LogInOrRegisterRoutingLogic & LogInOrRegisterDataPassing)!
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        configure()
    }
    
    required init?(coder aDecoder: NSCoder){
        super.init(coder: aDecoder)
        configure()
    }
    
    private func configure(){
        LogInOrRegisterConfigurator.configure(viewController: self)
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    

    @IBOutlet weak var containerView: UIView!
   
    var views: [UIView] = []
    var viewController : [UIViewController] = []
    lazy var firstChildVC: UIViewController? = {
       let firstChildVC = self.storyboard?.instantiateViewController(withIdentifier: "LogInViewController") as! LogInViewController
        return firstChildVC
    }()
    lazy var secondChildVC : UIViewController? = {
        let secondChildVC = self.storyboard?.instantiateViewController(withIdentifier: "RegistrationViewController") as! RegistrationViewController
        return secondChildVC
    }()

    override func viewDidLoad() {
        super.viewDidLoad()
        
        loadControllersInContainer()
        
    }
    
    override var shouldAutorotate: Bool{
        return false
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }

    @IBAction func changeVC(_ sender: UISegmentedControl) {
        self.containerView.bringSubviewToFront(views[sender.selectedSegmentIndex])
    }
    
}

extension LogInOrRegisterViewController: LogInOrRegisterViewControllerInput {
    
    func display(viewModel: LogInOrRegister.Fetch.ViewModel) {
        
    }
    
}

extension LogInOrRegisterViewController{
    
    func loadControllersInContainer(){
        
          views.append(firstChildVC!.view)
             views.append(secondChildVC!.view)
                   
             for v in views{
               
               v.frame = containerView.bounds
               containerView.addSubview(v)
             }
             viewController.append(firstChildVC!)
             viewController.append(secondChildVC!)
    
             for vc in viewController{
                 
               self.addChild(vc)
               vc.didMove(toParent: self)
             }
           self.containerView.bringSubviewToFront(self.views[0])
    }
            
}


